# -*- coding: utf-8 -*-
"""Resnet

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_astaOCMI1HyRGmMVbVui6_leQsp7y7w
"""

def resnet_model(n_classes,kernel_initializer='he_normal'):
  ecg = Input(shape=(30000, 6), dtype='float32', name='ecg')

  """ initial 3 layers """

  conv_1 = Conv1D(64,kernel_size=16,padding='same',kernel_initializer='he_normal')(ecg)
  bn_1   = BatchNormalization()(conv_1)
  act_1  = Activation('relu')(bn_1)

  """Residual Block 1 """
  #skip connection
  y = MaxPooling1D(strides=4, padding='same')(act_1)
  conv_2=Conv1D(128, 1, padding='same',kernel_initializer='he_normal',kernel_regularizer=tf.keras.regularizers.l2(l=0.01))(y)

  #Main_connection
  x=Conv1D(128,kernel_size=17,padding='same',kernel_initializer='he_normal')(act_1)
  bn_2=BatchNormalization()(x)
  act_2=Activation('relu')(bn_2)
  conv_3=Conv1D(128,kernel_size=16,strides=4,padding='same',kernel_initializer='he_normal',kernel_regularizer=tf.keras.regularizers.l2(l=0.01))(act_2)

  #Add conv_2 and conv_3
  add_1=add([conv_3,conv_2])

  """Residual Block 2"""
  #skip connection
  y1 = MaxPooling1D(strides=4, padding='same')(add_1)
  conv_4=Conv1D(196, 1, padding='same',kernel_initializer='he_normal',kernel_regularizer=tf.keras.regularizers.l2(l=0.01))(y1)

  #main connection
  bn_3=BatchNormalization()(add_1)
  act_3=Activation('relu')(bn_3)
  conv_5=Conv1D(196,kernel_size=17,padding='same',kernel_initializer='he_normal',kernel_regularizer=tf.keras.regularizers.l2(l=0.01))(act_3)
  bn_4=BatchNormalization()(conv_5)
  act_4=Activation('relu')(bn_4)
  conv_6=Conv1D(196,kernel_size=16,strides=4,padding='same',kernel_initializer='he_normal',kernel_regularizer=tf.keras.regularizers.l2(l=0.01))(act_4)


 #Add conv_5,conv_4

  add_2=add([conv_6,conv_4])

  """Residual Block 3"""
  #skip connection 
  y3 = MaxPooling1D(strides=4, padding='same')(add_2)
  conv_7=Conv1D(256,1, padding='same',kernel_initializer='he_normal',kernel_regularizer=tf.keras.regularizers.l2(l=0.01))(y3)
  
  #main connection
  bn_5=BatchNormalization()(add_2)
  act_5=Activation('relu')(bn_5)
  conv_8=Conv1D(256,kernel_size=17,padding='same',kernel_initializer='he_normal',kernel_regularizer=tf.keras.regularizers.l2(l=0.01))(act_5)
  bn_6=BatchNormalization()(conv_8)
  act_6=Activation('relu')(bn_6)
  conv_9=Conv1D(256,kernel_size=16,strides=4,padding='same',kernel_initializer='he_normal',kernel_regularizer=tf.keras.regularizers.l2(l=0.01))(act_6)


  #Add conv_8,conv_6
  add_3=add([conv_9,conv_7])


  """Residual Block 4"""


  #skip connection
  y4 = MaxPooling1D(strides=4, padding='same')(add_3)
  conv_10=Conv1D(320, 1, padding='same',kernel_initializer='he_normal',kernel_regularizer=tf.keras.regularizers.l2(l=0.01))(y4)
 
  #main connection
  bn_7=BatchNormalization()(add_3)
  act_7=Activation('relu')(bn_7)
  conv_11=Conv1D(320,kernel_size=17,padding='same',kernel_initializer='he_normal',kernel_regularizer=tf.keras.regularizers.l2(l=0.01))(act_7)
  bn_8=BatchNormalization()(conv_11)
  act_8=Activation('relu')(bn_8)
  conv_12=Conv1D(320,kernel_size=16,strides=4,padding='same',kernel_initializer='he_normal',kernel_regularizer=tf.keras.regularizers.l2(l=0.01))(act_8)

  #Add conv_11,conv_9

  add_4=add([conv_12,conv_10])

  bn_9=BatchNormalization()(add_4)
  act_9=Activation('relu')(bn_9)
  dp_9=Dropout(0.8)(act_9)

  z= Flatten()(dp_9)
  output = Dense(7, activation='sigmoid', kernel_initializer='he_normal')(z)
  model = Model(ecg,output)
  return model

if __name__ == "__main__":
    model2 = resnet_model(9)
    model2.summary()