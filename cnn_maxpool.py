# -*- coding: utf-8 -*-
"""CNN-Maxpool

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RfMexPUadW9T6txCWITOdRUBhsP-DOE8
"""

def conv_block1(filters, kernel, strides,x):
    x = Conv1D(filters, kernel, strides)(x)
    x = BatchNormalization()(x)
    x = ELU()(x)
    x = Conv1D(filters, kernel, strides)(x)
    x = BatchNormalization()(x)
    x = MaxPooling1D(3,strides=3)(x)
    return x

def conv_block2(filters, kernel, strides, x):
    x = Conv1D(filters, kernel, strides)(x)
    x = BatchNormalization()(x)
    x = ELU()(x)
    x = Conv1D(filters, kernel, strides)(x)
    x = BatchNormalization()(x)
    x = ELU()(x)
    x = Conv1D(filters, kernel, strides)(x)
    x = BatchNormalization()(x)
    x = ELU()(x)
    x = MaxPooling1D(3,strides=3)(x)
    return x

def my_model():
  input = Input(shape=(30000,6))
  x = Conv1D(64,3,1)(input)
  x = BatchNormalization()(x)
  x = ELU()(x)
  x = Dropout(0.2)(x)
  x = Conv1D(64,3,1)(x)
  x = BatchNormalization()(x)
  x = ELU()(x)
  x = Dropout(0.2)(x)
  x = MaxPooling1D(3,strides=3)(x)
  x = conv_block1(128,3,1,x)
  x = conv_block2(256,3,1,x)
  x = conv_block2(256,3,1,x)
  x = conv_block2(256,3,1,x)
 # x = MaxPooling1D(3,3,padding="same")

    
  x = Bidirectional(GRU(24, input_shape=(120,6),return_sequences=True,return_state=False,recurrent_initializer='orthogonal'))(x)
  x = Bidirectional(GRU(12, input_shape=(120,6),return_sequences=True,return_state=False,recurrent_initializer='orthogonal'))(x)
  x = Dropout(0.2)(x)
  x = AttentionWithContext()(x)
  x = BatchNormalization()(x)
  x = ELU()(x)

  output = Dense(7,activation='sigmoid')(x)

  model = Model(inputs=input, outputs=output)
  model.compile(loss ='binary_crossentropy', optimizer = Adam(0.001), metrics = ['accuracy'])
  return model